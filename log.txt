============================= test session starts =============================
platform win32 -- Python 3.12.7, pytest-8.4.2, pluggy-1.6.0 -- D:\Dev\kittygram_final\venv\Scripts\python.exe
rootdir: D:\Dev\kittygram_final
configfile: pytest.ini
testpaths: tests/
collecting ... collected 13 items

tests/test_connection.py::test_link_connection[taski_domain] PASSED      [  7%]
tests/test_connection.py::test_link_connection[kittygram_domain] FAILED  [ 15%]
tests/test_connection.py::test_projects_on_same_ip FAILED                [ 23%]
tests/test_connection.py::test_kittygram_static_is_available FAILED      [ 30%]
tests/test_connection.py::test_kittygram_api_available PASSED            [ 38%]
tests/test_dockerhub_images.py::test_dockerhub_images_exist PASSED       [ 46%]
tests/test_files.py::test_infra_files_exist PASSED                       [ 53%]
tests/test_files.py::test_deploy_info_file_content PASSED                [ 61%]
tests/test_files.py::test_backend_dockerfile_exists PASSED               [ 69%]
tests/test_files.py::test_backend_dokerfile_content PASSED               [ 76%]
tests/test_files.py::test_workflow_file PASSED                           [ 84%]
tests/test_files.py::test_requirements_location PASSED                   [ 92%]
tests/test_files.py::test_docker_compose_prod_file_exists PASSED         [100%]

================================== FAILURES ===================================
___________________ test_link_connection[kittygram_domain] ____________________

deploy_file_info = (WindowsPath('D:/Dev/kittygram_final/tests.yml'), 'tests.yml')
deploy_info_file_content = {'dockerhub_username': 'pavellagerev', 'kittygram_domain': 'https://kittygram-final10.duckdns.org', 'repo_owner': 'Chashkapluy1', 'taski_domain': 'https://taski-docker10.duckdns.org'}
link_key = 'kittygram_domain'

    def test_link_connection(
            deploy_file_info: tuple[Path, str],
            deploy_info_file_content: dict[str, str],
            link_key: str
    ) -> None:
        link = _get_validated_link(deploy_file_info, deploy_info_file_content,
                                   link_key)
>       response = _make_safe_request(link)
                   ^^^^^^^^^^^^^^^^^^^^^^^^

tests\test_connection.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

link = 'https://kittygram-final10.duckdns.org', stream = False

    def _make_safe_request(link: str, stream: bool = False) -> requests.Response:
        try:
            response = requests.get(link, stream=stream, timeout=15)
        except requests.exceptions.SSLError:
            raise AssertionError(
                f'Убедитесь, что настроили шифрование для `{link}`.'
            )
        except requests.exceptions.ConnectionError:
            raise AssertionError(
                f'Убедитесь, что URL `{link}` доступен.'
            )
        expected_status = HTTPStatus.OK
>       assert response.status_code == expected_status, (
            f'Убедитесь, что GET-запрос к `{link}` возвращает ответ со статусом '
            f'{int(expected_status)}.'
        )
E       AssertionError: Убедитесь, что GET-запрос к `https://kittygram-final10.duckdns.org` возвращает ответ со статусом 200.
E       assert 500 == <HTTPStatus.OK: 200>
E        +  where 500 = <Response [500]>.status_code

tests\test_connection.py:49: AssertionError
__________________________ test_projects_on_same_ip ___________________________

deploy_file_info = (WindowsPath('D:/Dev/kittygram_final/tests.yml'), 'tests.yml')
deploy_info_file_content = {'dockerhub_username': 'pavellagerev', 'kittygram_domain': 'https://kittygram-final10.duckdns.org', 'repo_owner': 'Chashkapluy1', 'taski_domain': 'https://taski-docker10.duckdns.org'}
kittygram_link_key = 'kittygram_domain', taski_link_key = 'taski_domain'

    def test_projects_on_same_ip(
            deploy_file_info: tuple[Path, str],
            deploy_info_file_content: dict[str, str],
            kittygram_link_key: str, taski_link_key: str
    ) -> None:
        links = [
            _get_validated_link(deploy_file_info, deploy_info_file_content,
                                link_key)
            for link_key in (kittygram_link_key, taski_link_key)
        ]
>       responses = [_make_safe_request(link, stream=True) for link in links]
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests\test_connection.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

link = 'https://kittygram-final10.duckdns.org', stream = True

    def _make_safe_request(link: str, stream: bool = False) -> requests.Response:
        try:
            response = requests.get(link, stream=stream, timeout=15)
        except requests.exceptions.SSLError:
            raise AssertionError(
                f'Убедитесь, что настроили шифрование для `{link}`.'
            )
        except requests.exceptions.ConnectionError:
            raise AssertionError(
                f'Убедитесь, что URL `{link}` доступен.'
            )
        expected_status = HTTPStatus.OK
>       assert response.status_code == expected_status, (
            f'Убедитесь, что GET-запрос к `{link}` возвращает ответ со статусом '
            f'{int(expected_status)}.'
        )
E       AssertionError: Убедитесь, что GET-запрос к `https://kittygram-final10.duckdns.org` возвращает ответ со статусом 200.
E       assert 500 == <HTTPStatus.OK: 200>
E        +  where 500 = <Response [500]>.status_code

tests\test_connection.py:49: AssertionError
_____________________ test_kittygram_static_is_available ______________________

deploy_file_info = (WindowsPath('D:/Dev/kittygram_final/tests.yml'), 'tests.yml')
deploy_info_file_content = {'dockerhub_username': 'pavellagerev', 'kittygram_domain': 'https://kittygram-final10.duckdns.org', 'repo_owner': 'Chashkapluy1', 'taski_domain': 'https://taski-docker10.duckdns.org'}
kittygram_link_key = 'kittygram_domain'

    def test_kittygram_static_is_available(
            deploy_file_info: tuple[Path, str],
            deploy_info_file_content: dict[str, str],
            kittygram_link_key: str
    ) -> None:
        link = _get_validated_link(deploy_file_info, deploy_info_file_content,
                                   kittygram_link_key)
>       response = _make_safe_request(link)
                   ^^^^^^^^^^^^^^^^^^^^^^^^

tests\test_connection.py:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

link = 'https://kittygram-final10.duckdns.org', stream = False

    def _make_safe_request(link: str, stream: bool = False) -> requests.Response:
        try:
            response = requests.get(link, stream=stream, timeout=15)
        except requests.exceptions.SSLError:
            raise AssertionError(
                f'Убедитесь, что настроили шифрование для `{link}`.'
            )
        except requests.exceptions.ConnectionError:
            raise AssertionError(
                f'Убедитесь, что URL `{link}` доступен.'
            )
        expected_status = HTTPStatus.OK
>       assert response.status_code == expected_status, (
            f'Убедитесь, что GET-запрос к `{link}` возвращает ответ со статусом '
            f'{int(expected_status)}.'
        )
E       AssertionError: Убедитесь, что GET-запрос к `https://kittygram-final10.duckdns.org` возвращает ответ со статусом 200.
E       assert 500 == <HTTPStatus.OK: 200>
E        +  where 500 = <Response [500]>.status_code

tests\test_connection.py:49: AssertionError
=========================== short test summary info ===========================
FAILED tests/test_connection.py::test_link_connection[kittygram_domain] - AssertionError: Убедитесь, что GET-запрос к `https://kittygram-final10.duckdns.org` возвращает ответ со статусом 200.
assert 500 == <HTTPStatus.OK: 200>
 +  where 500 = <Response [500]>.status_code
FAILED tests/test_connection.py::test_projects_on_same_ip - AssertionError: Убедитесь, что GET-запрос к `https://kittygram-final10.duckdns.org` возвращает ответ со статусом 200.
assert 500 == <HTTPStatus.OK: 200>
 +  where 500 = <Response [500]>.status_code
FAILED tests/test_connection.py::test_kittygram_static_is_available - AssertionError: Убедитесь, что GET-запрос к `https://kittygram-final10.duckdns.org` возвращает ответ со статусом 200.
assert 500 == <HTTPStatus.OK: 200>
 +  where 500 = <Response [500]>.status_code
================== 3 failed, 10 passed, 2 warnings in 12.47s ==================
